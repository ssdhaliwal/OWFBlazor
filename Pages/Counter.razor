@page "/counter"
@using OWFBlazorDemo.Services
@implements IDisposable
@inject IJSRuntime JS
@inject OWFBlazorDemo.Services.AppState AppState

<h1>App State Storage: Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">+ Increment</button>&nbsp;
<button class="btn btn-primary" @onclick="DecrementCount">- Decrement</button>&nbsp;
<button class="btn btn-primary" @onclick="ResetCount">0 Reset</button>

<br />
<br />

<code>App State Storage: Child List</code>
<EditForm Model="MyList" id="myList">
    <label for="myListValue">Key</label>
    <InputText id="myListValue" @bind-Value="MyList.Value" class="form-control" />
    <br />

    <button class="btn btn-primary" @onclick="onAddList">Add (Value)</button>&nbsp;
    <button class="btn btn-primary" @onclick="onAddListFromList">Add (CSV-List)</button>&nbsp;<br />
    <button class="btn btn-primary" @onclick="onSubtractList">Subtract (Value)</button>&nbsp;
    <button class="btn btn-primary" @onclick="onSubtractListPartial">Subtract (Value-Partial)</button>&nbsp;
    <button class="btn btn-primary" @onclick="onSubtractListFromList">Subtract (CSV-List)</button>&nbsp;<br />
    <button class="btn btn-primary" @onclick="onCheckList">Check (Value)</button>&nbsp;
    <button class="btn btn-primary" @onclick="onCheckListPartial">Check (Value-Partial)</button>&nbsp;
    <button class="btn btn-primary" @onclick="onCheckListFromListMatched">Check (CSV-List Matched)</button>&nbsp;
    <button class="btn btn-primary" @onclick="onCheckListFromList">Check (CSV-List Not-Matched)</button>&nbsp;<br />
    <button class="btn btn-primary" @onclick="onList">List (Value)</button>&nbsp;
    <button class="btn btn-primary" @onclick="onListPartial">List (Value-Partial)</button>&nbsp;
    <button class="btn btn-primary" @onclick="onListFromListMatched">List (CSV-List Matched)</button>&nbsp;
    <button class="btn btn-primary" @onclick="onListFromList">List (CSV-List Not-Matched)</button>&nbsp;
</EditForm>
<br />
<br />

<p>
    <code>List</code>: <br />@((MarkupString)text)
</p>

@code {
    private int currentCount = 0;
    private string text { get; set; }

    [Parameter]
    public int IncrementAmount { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        if (AppState == null)
        {
            System.Console.WriteLine("App State is NULL");
        }

        currentCount = (int)AppState.get("counter", 0);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AppState.set("counter", 0);
        }
    }

    public Counter()
    {
    }

    private async Task IncrementCount()
    {
        currentCount += IncrementAmount;
        AppState.set("counter", currentCount);

        await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.broadcast", "blazor.counter", "{'counter': " +
        currentCount + ",'status': 'increment'}");
    }

    private async Task DecrementCount()
    {
        currentCount -= IncrementAmount;
        AppState.set("counter", currentCount);

        await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.broadcast", "blazor.counter", "{'counter': " +
        currentCount + ",'status': 'decrement'}");
    }

    private async Task ResetCount()
    {
        currentCount = 0;
        AppState.set("counter", currentCount);

        await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.broadcast", "blazor.counter", "{'counter': " +
        currentCount + ",'status': 'reset'}");
    }

    public class MyListObject
    {
        public string Value { get; set; }
    }
    public MyListObject MyList = new MyListObject();

    private async Task onAddList()
    {
        AppState.add("MyList", MyList.Value);
        base.StateHasChanged();
    }

    private async Task onAddListFromList() {

    }
    private async Task onSubtractList() {

    }
    private async Task onSubtractListPartial() {

    }
    private async Task onSubtractListFromList() {

    }
    private async Task onCheckList() {

    }
    private async Task onCheckListPartial() {

    }
    private async Task onCheckListFromListMatched() {

    }
    private async Task onCheckListFromList() {

    }
    private async Task onList() {

    }
    private async Task onListPartial() {

    }
    private async Task onListFromListMatched() {

    }
    private async Task onListFromList() {

    }

    async void IDisposable.Dispose()
    {
    }
}
