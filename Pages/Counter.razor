@page "/counter"
@using System.Diagnostics
@implements IDisposable
@inject IJSRuntime JS
@inject OWFBlazorDemo.Services.AppState AppState

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">+ Increment</button>&nbsp;
<button class="btn btn-primary" @onclick="DecrementCount">- Decrement</button>&nbsp;
<button class="btn btn-primary" @onclick="ResetCount">0 Reset</button>

<br/>
<br/>

<button class="btn btn-primary" @onclick="StartMapStatus">Start Map Status</button>&nbsp;
<button class="btn btn-primary" @onclick="StopMapStatus">Stop Map Status</button>&nbsp;
<br/>
<br/>

<p>
    <code>Map View</code>: @text
</p>

@code {
    private readonly DotNetObjectReference<Counter> _objeRef;
    private int currentCount = 0;
    private string text { get; set; }

    [Parameter]
    public int IncrementAmount { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        if (AppState == null) {
            System.Console.WriteLine("App State is NULL");
        }

        currentCount = (int)AppState.get("counter", 0);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("NotificationManager.register", _objeRef);
        }
    }

    public Counter()
    {
        _objeRef = DotNetObjectReference.Create(this);
    }

    private async Task IncrementCount()
    {
        currentCount += IncrementAmount;
        AppState.set("counter", currentCount);

        await JS.InvokeVoidAsync("OWF.Eventing.publish", "counter.push", "{'counter': " + currentCount + ",'status': 'increment'}");
    }

    private async Task DecrementCount()
    {
        currentCount -= IncrementAmount;
        AppState.set("counter", currentCount);

        await JS.InvokeVoidAsync("OWF.Eventing.publish", "counter.push", "{'counter': " + currentCount + ",'status': 'decrement'}");
    }

    private async Task ResetCount()
    {
        currentCount = 0;
        AppState.set("counter", currentCount);

        await JS.InvokeVoidAsync("OWF.Eventing.publish", "counter.push", "{'counter': " + currentCount + ",'status': 'reset'}");
    }

    private async Task StartMapStatus()
    {
        await JS.InvokeVoidAsync("NotificationManager.start", "map.status.view");
    }

    private async Task StopMapStatus()
    {
        await JS.InvokeVoidAsync("NotificationManager.stop", "map.status.view");
    }

    [JSInvokable]
    public Task<string> GetMapStatusView(string mapView)
    {
        text = mapView;
        base.StateHasChanged();
        
        return Task.FromResult("Done");
    }

    async void IDisposable.Dispose()
    {
        await JS.InvokeVoidAsync("NotificationManager.stop", "map.status.view");
        await JS.InvokeVoidAsync("NotificationManager.deregister");    
        _objeRef.Dispose();
    }
}
