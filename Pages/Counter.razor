@page "/counter"
@using OWFBlazorDemo.Services
@implements IDisposable
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject OWFBlazorDemo.Services.AppState AppState

<h1>App State Storage: Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">+ Increment</button>&nbsp;
<button class="btn btn-primary" @onclick="DecrementCount">- Decrement</button>&nbsp;
<button class="btn btn-primary" @onclick="ResetCount">0 Reset</button>

<br />
<br />

@code {
    private int currentCount = 0;

    [Parameter]
    public int IncrementAmount { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        if (AppState == null)
        {
            System.Console.WriteLine("App State is NULL");
        }

        currentCount = (int)AppState.get("counter", 0);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string initialization = (string)AppState.get("initializtion", "false");
            if (initialization == "false") {
                NavigationManager.NavigateTo("/");  
            }

            AppState.set("counter", 0);
        }
    }

    public Counter()
    {
    }

    private async Task IncrementCount()
    {
        currentCount += IncrementAmount;
        AppState.set("counter", currentCount);

        await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.broadcast", "blazor.counter", "{'counter': " +
        currentCount + ",'status': 'increment'}");
    }

    private async Task DecrementCount()
    {
        currentCount -= IncrementAmount;
        AppState.set("counter", currentCount);

        await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.broadcast", "blazor.counter", "{'counter': " +
        currentCount + ",'status': 'decrement'}");
    }

    private async Task ResetCount()
    {
        currentCount = 0;
        AppState.set("counter", currentCount);

        await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.broadcast", "blazor.counter", "{'counter': " +
        currentCount + ",'status': 'reset'}");
    }

    async void IDisposable.Dispose()
    {
    }
}
