@page "/"
@namespace OWFBlazorDemo.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <meta http-equiv="cache-control" content="no-cache, no-store, must-revalidate" />
    <!-- meta http-equiv="cache-control" content="max-age=360" /-->
    <meta http-equiv="pragma" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />

    <title>OWFBlazorDemo</title>

    <base href="~/" />
    <link rel="stylesheet" type="text/css" href="css/dragAndDrop.css" />

    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="OWFBlazorDemo.styles.css" rel="stylesheet" />

    <script src="js/owf-widget-debug.js"></script>
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js" autostart="false"></script>
    <script>
        var self = this;
        self._objects = {
            namespace: "rescue21.uscg.mil",
            owfInstance: "https://localhost:8443/",
            dotnetInstance: null,
            channels: {},
            userProfile: {
                uuid: "",
                currentUserName: "",
                currentUser: "",
                currentUserPrevLogin: "",
                currentId: 0,
                email: "",
                groups: []
            }
        };

        /*
        + Utility Functions
        */

        executeFunctionByName = function (functionName, context /*, args */) {
            let args = Array.prototype.slice.call(arguments, 2);
            let namespaces = functionName.split(".");
            let func = namespaces.pop();

            for(let i = 0; i < namespaces.length; i++) {
                context = context[namespaces[i]];
            }

            return context[func].apply(context, args);
        };

        // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid
        guid = function() {
            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            );
        };

        ajaxCall = function (url, data, callback, stateChange, type,
            contentType, id) {
            // fix input vars if not defined
            if ((data === undefined) || (data === null) || (!data)) {
                data = {};
            }

            if ((callback === undefined) || (callback === null) || (!callback)) {
                callback = function () { };
            }

            if ((stateChange === undefined) || (stateChange === null) || (!stateChange)) {
                stateChange = function () { };
            }

            if ((type === undefined) || (type === null) || (!type)) {
                type = 'GET';
            }

            // initiate the call
            var req = new XMLHttpRequest();
            req.onreadystatechange = function () {
                stateChange({
                    state: req.readyState,
                    status: req.status
                });

                if (req.readyState === 4 && req.status === 200) {
                    if (contentType === "application/octet-stream") {
                        return callback({
                            "id": id,
                            "payload": (req.response || req.responseText)
                        });
                    } else {
                        return callback({
                            "id": id,
                            "payload": req.responseText
                        });
                    }
                }
            };

            req.open(type, url, true);
            req.withCredentials = true;
            //req.setRequestHeader("Cache-Control", "max-age=0");

            //req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            //req.setRequestHeader("Content-type", "application/json");
            if (!contentType) {
                req.overrideMimeType("text/plain");
                req.setRequestHeader("Content-type", "text/plain");
            } else {
                req.overrideMimeType(contentType);
                req.setRequestHeader("Content-type", contentType);

                if (contentType === "application/octet-stream") {
                    req.overrideMimeType("text/plain; charset=x-user-defined");
                    req.responseType = "arrayBuffer";
                }
            }

            //req.timeout = 30000;
            if (type === 'GET') {
                req.send();
            } else {
                req.send(JSON.stringify(data));
            }

            // return the object
            return req;
        };

        /*
        + OWF Functions
        */

        GetUserUUID = function() {
            OWF.Preferences.getUserPreference({
                namespace: self._objects.namespace,
                name: "uuid",
                onSuccess: owfdojo.hitch(self, "onGetUserUUIDSuccess"),
                onFailure: owfdojo.hitch(self, "onGetUserUUIDFailure")
            });
        };

        onGetUserUUIDSuccess = function (pref) {
            if (pref.value) {
                self._objects.userProfile.uuid = JSON.parse(pref.value);
                self.notifyDotnet("owf.user.uuid", self._objects.userProfile.uuid);
            } else {
                window.setTimeout(function() {
                    self._objects.userProfile.uuid = self.guid();
                    self.notifyDotnet("owf.user.uuid", self._objects.userProfile.uuid);

                    self.SetUserPreference("uuid", self._objects.userProfile.uuid);
                }, 500);
            }
        };

        onGetUserUUIDFailure = function (error, status) {
            console.log("!ERROR! - cannot retrieve user configuration/" + status + "/" + error);

            // create uuid and store it
            if (status !== 404) {
                window.setTimeout(function() {
                    self._objects.userProfile.uuid = self.guid();
                    self.notifyDotnet("owf.user.uuid", self._objects.userProfile.uuid);

                    self.SetUserPreference("uuid", self._objects.userProfile.uuid);
                }, 500);
            } else {
                self.notifyDotnet("owf.user.uuid", "!ERROR! - cannot retrieve user profile info/" + status + "/" + error);
            }
        };

        GetUser = function() {
            Ozone.pref.PrefServer.getCurrentUser({
                onSuccess: owfdojo.hitch(self, "onGetUserInfoSuccess"),
                onFailure: owfdojo.hitch(self, "onGetUserInfoFailure")
            });
        };

        onGetUserInfoSuccess = function (userInfo) {
            self._objects.userProfile.currentUserName = userInfo.currentUserName;
            self._objects.userProfile.currentUser = userInfo.currentUser;
            self._objects.userProfile.currentUserPrevLogin = userInfo.currentUserPrevLogin;
            self._objects.userProfile.currentId = userInfo.currentId;
            self._objects.userProfile.email = userInfo.email;

            self.notifyDotnet("owf.user", JSON.stringify(userInfo));
        };

        onGetUserInfoFailure = function (error, status) {
            self._objects.userProfile.currentUserName = "";
            self._objects.userProfile.currentUser = "";
            self._objects.userProfile.currentUserPrevLogin = "";
            self._objects.userProfile.currentId = 0;
            self._objects.userProfile.email = "";

            console.log("!ERROR! - cannot retrieve user profile info/" + status + "/" + error);
            self.notifyDotnet("owf.user", "!ERROR! - cannot retrieve user profile info/" + status + "/" + error);
        };

        GetUserGroups = function() {
            self.ajaxCall(self._objects.owfInstance + "owf/group?user_id=" + self._objects.userProfile.currentId,
                null,
                owfdojo.hitch(self, "onGetGroupSuccess"),
                null,
                null,
                "application/json",
                "GROUPINFO");
        };

        onGetGroupSuccess = function (groups) {
            let payload = JSON.parse(groups.payload);
            payload.data.forEach((group) => {
                if (group.status === "active") {
                    self._objects.userProfile.groups.push({
                        displayName: group.displayName,
                        id: group.id,
                        name: group.name
                    });
                }
            });

            self.notifyDotnet("owf.user.groups", JSON.stringify(self._objects.userProfile.groups));
        };

        GetUserPreference = function (key) {
            OWF.Preferences.getUserPreference({
                namespace: self._objects.namespace,
                name: key,
                onSuccess: owfdojo.hitch(self, "onGetUserPreferenceSuccess", key),
                onFailure: owfdojo.hitch(self, "onGetUserPreferenceFailure", key)
            });
        };

        onGetUserPreferenceSuccess = function (key, pref) {
            self.notifyDotnet("owf.preference.get", JSON.stringify(pref));
        };

        onGetUserPreferenceFailure = function (key, error, status) {
            self.notifyDotnet("owf.preference.get", "!ERROR! - cannot get preference (" + key + ")/" + status + "/" + error);
        };

        SetUserPreference = function (key, value) {
            OWF.Preferences.setUserPreference({
                namespace: self._objects.namespace,
                name: key,
                value: value,
                onSuccess: owfdojo.hitch(self, "onSetUserPreferenceSuccess", key, value),
                onFailure: owfdojo.hitch(self, "onSetUserPreferenceFailure", key, value)
            });
        };

        onSetUserPreferenceSuccess = function (key, value, payload) {
            self.notifyDotnet("owf.preference.set", JSON.stringify(payload));
        };

        onSetUserPreferenceFailure = function (key, value, error, status) {
            self.notifyDotnet("owf.preference.set", "!ERROR! - cannot set preference (" + key + ":" + value + ")/" + status + "/" + error);
        };

        DeleteUserPreference = function (key) {
            OWF.Preferences.deleteUserPreference({
                namespace: self._objects.namespace,
                name: key,
                onSuccess: owfdojo.hitch(self, "onDeleteUserPreferenceSuccess", key),
                onFailure: owfdojo.hitch(self, "onDeleteUserPreferenceFailure", key)
            });
        };

        onDeleteUserPreferenceSuccess = function (key, payload) {
            self.notifyDotnet("owf.preference.delete", JSON.stringify(payload));
        };

        onDeleteUserPreferenceFailure = function (key, error, status) {
            self.notifyDotnet("owf.preference.delete", "!ERROR! - cannot get preference (" + key + ")/" + status + "/" + error);
        };

        /*
        + MAP Functions
        */

        ReceiveMapStatusView = function (sender, message) {
            let senderId = JSON.parse(sender);
            if (senderId.id === OWF.getInstanceId()) {
                return false;
            }

            self.notifyDotnet("map.status.view", message);
        };

        /*
        + interop channel controller
        */

        notifyDotnet = function(channel, message) {
            if (self._objects.hasOwnProperty("dotnetInstance") && self._objects.dotnetInstance &&
                (self._objects.channels.hasOwnProperty(channel))) {
                let callback = self._objects.channels[channel].callback;
                const result = self._objects.dotnetInstance.invokeMethodAsync(callback, message);
            }
        };

        window.NotificationManager = {
            register: (objRef) => {
                self._objects.dotnetInstance = objRef;
            },
            start: (channel, callback, execute, key, value) => {
                let valid = self._objects.channels.hasOwnProperty(channel);
                if (!valid) {
                    self._objects.channels[channel] = {
                        "callback": callback
                    }
                }

                if (execute) {
                    self.executeFunctionByName(callback, self, key, value);
                }
            },
            stop: (channel) => {
                let valid = self._objects.channels.hasOwnProperty(channel);
                if (valid) {
                    delete self._objects.channels[channel];
                }
            },
            deregister: () => {
                self._objects.channels = {};
                self._objects.dotnetInstance = null;
            }
        };

        /*
        + initial OWF setup and default channel activation (called from index.razor)
        */
        /*
        shutdownWidget = function() {
            // remove listener override to prevent looping
            self._WidgetStateController.removeStateEventOverrides({
                events: ['beforeclose'],
                callback: function () {
                    // unsubcribe the events
                    OWF.Eventing.unsubscribe("map.status.view");

                    self._WidgetStateController.closeWidget();
                }
            });
        };
        */
        EventSubscriptions = function() {
            OWF.Eventing.subscribe("map.status.view", owfdojo.hitch(self, "ReceiveMapStatusView"));
        };

        UnregisterEvents = function() {
            OWF.Eventing.unsubscribe("map.status.view");
        };

        window.AttachHandlers = () => {
            console.log(".. attaching handlers! (debug view trap; remove prior to publish for production)");
            OWF.relayFile = "js/eventing/rpc_relay.uncompressed.html?deployVer=1.2.0";
            owfdojo.config.dojoBlankHtmlUrl = "js/dojo-1.5.0-windowname-only/dojo/resources/blank.html?deployVer=1.2.0";
            /*
            self._WidgetStateController = Ozone.state.WidgetState.getInstance({
                widgetEventingController: Ozone.eventing.Widget.getInstance(),
                autoInit: true,

                // this is fired on any event that you are registered for.
                // the msg object tells us what event it was
                onStateEventReceived: function (sender, msg) {
                    if (msg.eventName === "beforeclose") {
                        self.shutdownWidget(null, null);
                    }
                }
            });
            self._WidgetStateController.addStateEventOverrides({
                events: ["beforeclose"]
            });
            */
            self.EventSubscriptions();
        };

        Blazor.start();
    </script>
</body>
</html>
