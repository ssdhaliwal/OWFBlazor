@page "/cmapiInterface"
@using OWFBlazorDemo.Services
@implements IDisposable
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject OWFBlazorDemo.Services.AppState AppState

<h1><code>CMAPI</code> Interface</h1>

<p>
    <code>Map Events</code>
    <br />
    <code>UUID</code>: @uuid
    <br />
<ul>
    <li>LISTENERS</li>
    <ul>
        <li>1. Map Click</li>
        <li>2. View State</li>
    </ul>
</ul>
<ul>
    <li>PROJECTION</li>
    <ul>
        <li>1. Marker</li>
        <li>2. LineString</li>
        <li>3. Polygon</li>
        <li>4. KML</li>
        <li>5. Line Projection</li>
        <li>6. Service - Feature</li>
        <li style="color:gray">7. Service - Measurement</li>
        <li style="color:gray">8. Service - Geocoding</li>
    </ul>
</ul>
</p>

<p>
    <EditForm Model="MapInfo" id="saveMapInfo">
        <label for="saveMapInfoOverlay">overlay</label>
        <InputText id="saveMapInfoOverlay" @bind-Value="MapInfo.Overlay" class="form-control" />
        <label for="saveMapInfoFeature">overlay</label>
        <InputText id="saveMapInfoFeature" @bind-Value="MapInfo.Feature" class="form-control" />

        <label for="saveMapInfoValue">Coordinates</label>
        <InputTextArea id="saveMapInfoValue" @bind-Value="MapInfo.Value" class="form-control" rows="5" />

        <button class="btn btn-primary" @onclick="onPlotMarker">Plot Marker</button>&nbsp;
        <button class="btn btn-primary" @onclick="onPlotLineString">Plot LineString</button>&nbsp;
        <button class="btn btn-primary" @onclick="onPlotPolygon">Plot Polygon</button>
        <br/>
        <br/>

        <label>JSON Object (Direct API)</label>
        <br/>
        <button class="btn btn-primary" @onclick="onPlotJSONMarker">Plot Marker</button>&nbsp;
        <button class="btn btn-primary" @onclick="onPlotJSONLineString">Plot LineString</button>&nbsp;
        <button class="btn btn-primary" @onclick="onPlotJSONPolygon">Plot Polygon</button>

    </EditForm>
    <br />
    <br />
    <code>Map View</code>: <br />@((MarkupString)text)
</p>

@code {
    private readonly DotNetObjectReference<CMAPIInterface> _objeRef;
    private string uuid = "";
    private string text = "";

    public class MapInfoObject
    {
        public string Overlay { get; set; }
        public string Feature { get; set; }
        public string Value { get; set; }
    }
    public MapInfoObject MapInfo = new MapInfoObject();

    protected override async Task OnInitializedAsync()
    {
        if (AppState == null)
        {
            System.Console.WriteLine("App State is NULL");
        }

        uuid = (string)AppState.get("uuid", "");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string initialization = (string)AppState.get("initialization", "false");
            if (initialization == "false") {
            NavigationManager.NavigateTo("/");  
            }

            await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.register", _objeRef);

            // start subscriptions
            await JS.InvokeVoidAsync("interopInterface.RegisterEvents");
            await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.start", "map.status.view", "ReceiveMapStatusView");
            await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.start", "map.view.clicked", "ReceiveMapViewClicked");
        }
    }

    public CMAPIInterface()
    {
        _objeRef = DotNetObjectReference.Create(this);
    }

    [JSInvokable]
    public async Task ReceiveMapStatusView(string mapView)
    {
        text = "(map.status.view) -> " + JSONServices.JSONAsHTMLString(mapView) + "<br/>";
        base.StateHasChanged();
    }

    [JSInvokable]
    public async Task ReceiveMapViewClicked(string mapView)
    {
        text = "(map.view.clicked) -> " + JSONServices.JSONAsHTMLString(mapView) + "<br/>";
        base.StateHasChanged();

        // store lat/lon in the list
        // plot temp marker for the last lat/lon

    }

    private async Task onPlotMarker()
    {
        string uuid = Guid.NewGuid().ToString();
        await JS.InvokeVoidAsync("interopInterface.shared.cmapiInterface.PlotMarker", MapInfo.Overlay, MapInfo.Feature, uuid, MapInfo.Value);

        Random rnd = new Random();

        int i = 1000, latOffset = 0, lonOffset = 0, lat = 0, lon = 0;
        string[] latlonArray = MapInfo.Value.Split(",");
        lon = (int)Math.Truncate(float.Parse(latlonArray[0]));
        lat = (int)Math.Truncate(float.Parse(latlonArray[1]));

        var stopwatch = System.Diagnostics.Stopwatch.StartNew();
        while (stopwatch.Elapsed < TimeSpan.FromSeconds(10))
        {
            i++;

            lonOffset = rnd.Next(0, 999999);
            latOffset = rnd.Next(0, 999999);

            await Task.Delay(100);
            await JS.InvokeVoidAsync("interopInterface.shared.cmapiInterface.PlotMarker", MapInfo.Overlay, MapInfo.Feature, uuid, 
                ((lon + "." + lonOffset) + "," + (lat + "." + latOffset)));
        }
    }
    private async Task onPlotLineString()
    {
        string uuid = Guid.NewGuid().ToString();
        await JS.InvokeVoidAsync("interopInterface.shared.cmapiInterface.PlotLineString", MapInfo.Overlay, MapInfo.Feature, uuid, MapInfo.Value, "redline");

        Random rnd = new Random();

        int i = 2000, latStartOffset = 0, lonStartOffset = 0, latEndOffset = 0, lonEndOffset = 0, 
            lonStart = 0, latStart = 0, lonEnd = 0, latEnd = 0, style = 1;
        string styleColor = "redline";
        string[] lineArray = MapInfo.Value.Split(" ");
        if (lineArray.Count() == 2) {
            string[] latlonStart = lineArray[0].Split(",");
            string[] latlonEnd = lineArray[1].Split(",");

            lonStart = (int)Math.Truncate(float.Parse(latlonStart[0]));
            latStart = (int)Math.Truncate(float.Parse(latlonStart[1]));

            lonEnd = (int)Math.Truncate(float.Parse(latlonEnd[0]));
            latEnd = (int)Math.Truncate(float.Parse(latlonEnd[1]));

            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            while (stopwatch.Elapsed < TimeSpan.FromSeconds(10))
            {
                i++;

                lonStartOffset = rnd.Next(0, 999999);
                latStartOffset = rnd.Next(0, 999999);

                lonEndOffset = rnd.Next(0, 999999);
                latEndOffset = rnd.Next(0, 999999);

                style = rnd.Next(1, 3);
                if (style == 1) {
                    styleColor = "redline";
                } else if (style == 2) {
                    styleColor = "blueline";
                } else if (style == 3) {
                    styleColor = "greenline";
                }

                await Task.Delay(100);
                await JS.InvokeVoidAsync("interopInterface.shared.cmapiInterface.PlotLineString", MapInfo.Overlay, MapInfo.Feature, uuid, 
                    ((lonStart + "." + lonStartOffset) + "," + (latStart + "." + latStartOffset) + " " + 
                    (lonEnd + "." + lonEndOffset) + "," + (latEnd + "." + latEndOffset)),
                    styleColor);
            }
        }
    }
    private async Task onPlotPolygon()
    {
        string uuid = Guid.NewGuid().ToString();

        Random rnd = new Random();

        int i = 2000, latLoc1 = 0, latLoc2 = 0, latLoc3 = 0, latLoc4 = 0, 
            lonLoc1 = 0, lonLoc2 = 0, lonLoc3 = 0, lonLoc4 = 0, 
            lonStart = 0, latStart = 0, lonEnd = 0, latEnd = 0, style = 1;
        string styleColor = "redline";
        string[] lineArray = MapInfo.Value.Split(" ");
        if (lineArray.Count() == 2) {
            string[] latlonStart = lineArray[0].Split(",");
            string[] latlonEnd = lineArray[1].Split(",");

            lonStart = (int)Math.Truncate(float.Parse(latlonStart[0]));
            latStart = (int)Math.Truncate(float.Parse(latlonStart[1]));

            lonEnd = (int)Math.Truncate(float.Parse(latlonEnd[0]));
            latEnd = (int)Math.Truncate(float.Parse(latlonEnd[1]));

            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            while (stopwatch.Elapsed < TimeSpan.FromSeconds(10))
            {
                i++;

                latLoc1 = rnd.Next(0, 999999);
                latLoc2 = rnd.Next(0, 999999);
                latLoc3 = rnd.Next(0, 999999);
                latLoc4 = rnd.Next(0, 999999);

                lonLoc1 = rnd.Next(0, 999999);
                lonLoc2 = rnd.Next(0, 999999);
                lonLoc3 = rnd.Next(0, 999999);
                lonLoc4 = rnd.Next(0, 999999);

                style = rnd.Next(1, 3);
                if (style == 1) {
                    styleColor = "redline";
                } else if (style == 2) {
                    styleColor = "blueline";
                } else if (style == 3) {
                    styleColor = "greenline";
                }

                await Task.Delay(100);
                await JS.InvokeVoidAsync("interopInterface.shared.cmapiInterface.PlotPolygon", MapInfo.Overlay, MapInfo.Feature, uuid, 
                    (lonStart + "." + lonLoc1) + "," + (latStart + "." + latLoc1) + " " + 
                    ((lonStart + 2) + "." + lonLoc2) + "," + ((latStart + 2) + "." + latLoc2) + " " + 
                    ((lonEnd + 2) + "." + lonLoc3) + "," + ((latEnd + 2) + "." + latLoc3) + " " +
                    (lonEnd + "." + lonLoc4) + "," + (latEnd + "." + latLoc4),
                    "",
                    styleColor);
            }
        }
    }

    private async Task onPlotJSONMarker() {
        string uuid = Guid.NewGuid().ToString();

        Random rnd = new Random();

        int i = 1000, latOffset = 0, lonOffset = 0, lat = 0, lon = 0;
        string[] latlonArray = MapInfo.Value.Split(",");
        lon = (int)Math.Truncate(float.Parse(latlonArray[0]));
        lat = (int)Math.Truncate(float.Parse(latlonArray[1]));

        var stopwatch = System.Diagnostics.Stopwatch.StartNew();
        while (stopwatch.Elapsed < TimeSpan.FromSeconds(10))
        {
            i++;

            lonOffset = rnd.Next(0, 999999);
            latOffset = rnd.Next(0, 999999);

            await Task.Delay(100);
            await JS.InvokeVoidAsync("interopInterface.shared.cmapiInterface.PlotJSONMarker", MapInfo.Overlay, MapInfo.Feature, uuid, 
                (lon + "." + lonOffset), (lat + "." + latOffset));
        }
    }
    private async Task onPlotJSONLineString() {
        string uuid = Guid.NewGuid().ToString();

        Random rnd = new Random();

        int i = 2000, latStartOffset = 0, lonStartOffset = 0, latEndOffset = 0, lonEndOffset = 0, 
            lonStart = 0, latStart = 0, lonEnd = 0, latEnd = 0, style = 1;
        string styleColor = "[255, 0, 0, 255]";
        string[] lineArray = MapInfo.Value.Split(" ");
        if (lineArray.Count() == 2) {
            string[] latlonStart = lineArray[0].Split(",");
            string[] latlonEnd = lineArray[1].Split(",");

            lonStart = (int)Math.Truncate(float.Parse(latlonStart[0]));
            latStart = (int)Math.Truncate(float.Parse(latlonStart[1]));

            lonEnd = (int)Math.Truncate(float.Parse(latlonEnd[0]));
            latEnd = (int)Math.Truncate(float.Parse(latlonEnd[1]));

            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            while (stopwatch.Elapsed < TimeSpan.FromSeconds(10))
            {
                i++;

                lonStartOffset = rnd.Next(0, 999999);
                latStartOffset = rnd.Next(0, 999999);

                lonEndOffset = rnd.Next(0, 999999);
                latEndOffset = rnd.Next(0, 999999);

                style = rnd.Next(1, 3);
                if (style == 1) {
                    styleColor = "[255, 0, 0, 255]";
                } else if (style == 2) {
                    styleColor = "[43, 134, 44, 255]";
                } else if (style == 3) {
                    styleColor = "[43, 87, 198, 255]";
                }

                await Task.Delay(100);
                await JS.InvokeVoidAsync("interopInterface.shared.cmapiInterface.PlotJSONLineString", MapInfo.Overlay, MapInfo.Feature, uuid, 
                    (lonStart + "." + lonStartOffset) + "," + (latStart + "." + latStartOffset),
                    (lonEnd + "." + lonEndOffset) + "," + (latEnd + "." + latEndOffset),
                    styleColor);
            }
        }
    }
    private async Task onPlotJSONPolygon() {
        string uuid = Guid.NewGuid().ToString();

        Random rnd = new Random();

        int i = 2000, latLoc1 = 0, latLoc2 = 0, latLoc3 = 0, latLoc4 = 0, 
            lonLoc1 = 0, lonLoc2 = 0, lonLoc3 = 0, lonLoc4 = 0, 
            lonStart = 0, latStart = 0, lonEnd = 0, latEnd = 0, style = 1;
        string styleColor = "[255, 0, 0, 255]";
        string[] lineArray = MapInfo.Value.Split(" ");
        if (lineArray.Count() == 2) {
            string[] latlonStart = lineArray[0].Split(",");
            string[] latlonEnd = lineArray[1].Split(",");

            lonStart = (int)Math.Truncate(float.Parse(latlonStart[0]));
            latStart = (int)Math.Truncate(float.Parse(latlonStart[1]));

            lonEnd = (int)Math.Truncate(float.Parse(latlonEnd[0]));
            latEnd = (int)Math.Truncate(float.Parse(latlonEnd[1]));

            var stopwatch = System.Diagnostics.Stopwatch.StartNew();
            while (stopwatch.Elapsed < TimeSpan.FromSeconds(10))
            {
                i++;

                latLoc1 = rnd.Next(0, 999999);
                latLoc2 = rnd.Next(0, 999999);
                latLoc3 = rnd.Next(0, 999999);
                latLoc4 = rnd.Next(0, 999999);

                lonLoc1 = rnd.Next(0, 999999);
                lonLoc2 = rnd.Next(0, 999999);
                lonLoc3 = rnd.Next(0, 999999);
                lonLoc4 = rnd.Next(0, 999999);

                style = rnd.Next(1, 3);
                if (style == 1) {
                    styleColor = "[255, 0, 0, 255]";
                } else if (style == 2) {
                    styleColor = "[43, 134, 44, 255]";
                } else if (style == 3) {
                    styleColor = "[43, 87, 198, 255]";
                }

                await Task.Delay(100);
                await JS.InvokeVoidAsync("interopInterface.shared.cmapiInterface.PlotJSONPolygon", MapInfo.Overlay, MapInfo.Feature, uuid, 
                    "[" + (lonStart + "." + lonLoc1) + "," + (latStart + "." + latLoc1) + "],[" + 
                    ((lonStart + 2) + "." + lonLoc2) + "," + ((latStart + 2) + "." + latLoc2) + "],[" + 
                    ((lonEnd + 2) + "." + lonLoc3) + "," + ((latEnd + 2) + "." + latLoc3) + "],[" +
                    (lonEnd + "." + lonLoc4) + "," + (latEnd + "." + latLoc4) + "]",
                    "",
                    styleColor);
            }
        }
    }

    async void IDisposable.Dispose()
    {
        await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.stop", "map.status.view");
        await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.stop", "map.view.clicked");
        await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.deregister");
        _objeRef.Dispose();

        // start subscriptions
        await JS.InvokeVoidAsync("interopInterface.UnregisterEvents");
    }
}