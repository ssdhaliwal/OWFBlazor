@page "/cmapiInterface"
@using OWFBlazorDemo.Services
@implements IDisposable
@inject IJSRuntime JS
@inject OWFBlazorDemo.Services.AppState AppState

<h1><code>CMAPI</code> Interface</h1>

<p>
    <code>Map Events</code>
<ul>
    <li>LISTENERS</li>
    <ul>
        <li>1. Map Click</li>
        <li>2. View State</li>
    </ul>
</ul>
<ul>
    <li>PROJECTION</li>
    <ul>
        <li>1. Marker</li>
        <li>2. LineString</li>
        <li>3. Polygon</li>
        <li>4. Complex</li>
        <li>5. Service - Feature</li>
        <li>6. Service - Measurement</li>
        <li>7. Service - Geocoding</li>
    </ul>
</ul>
</p>

<p>
    <code>Map View</code>: <br />@((MarkupString)text)
</p>

@code {
    private readonly DotNetObjectReference<CMAPIInterface> _objeRef;
    private string text = "";

    protected override async Task OnInitializedAsync()
    {
        if (AppState == null)
        {
            System.Console.WriteLine("App State is NULL");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.register", _objeRef);

            // start subscriptions
            await JS.InvokeVoidAsync("interopInterface.RegisterEvents");
            await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.start", "map.status.view", "ReceiveMapStatusView");
            await JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.start", "map.view.clicked", "ReceiveMapViewClicked");
        }
    }

    public CMAPIInterface()
    {
        _objeRef = DotNetObjectReference.Create(this);
    }

    [JSInvokable]
    public async Task ReceiveMapStatusView(string mapView)
    {
        text += "(map.status.view) -> " + JSONServices.JSONAsHTMLString(mapView) + "<br/>";
        base.StateHasChanged();
    }

    [JSInvokable]
    public async Task ReceiveMapViewClicked(string mapView)
    {
        text += "(map.view.clicked) -> " + JSONServices.JSONAsHTMLString(mapView) + "<br/>";
        base.StateHasChanged();

        // store lat/lon in the list
        // plot temp marker for the last lat/lon
    }

    async void IDisposable.Dispose()
    {
        JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.stop", "map.status.view");
        JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.stop", "map.view.clicked");
        JS.InvokeVoidAsync("interopInterface.INTEROPMessageHandler.deregister");
        _objeRef.Dispose();

        // start subscriptions
        JS.InvokeVoidAsync("interopInterface.UnregisterEvents");
    }

}